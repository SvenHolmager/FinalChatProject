/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import chatclient.ChatClient;
import chatclient.ChatListener;
import chatserver.ChatServer;
import java.io.IOException;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import shared.ProtocolStrings;

/**
 * @author Artur
 */
public class TestClient {

    ChatClient artur = new ChatClient();
    ChatClient nikos = new ChatClient();
    ChatClient sven = new ChatClient();

    public TestClient() {
    }

    @BeforeClass
    public static void setUpClass() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                ChatServer.main(null);
            }
        }).start();
    }

    @AfterClass
    public static void tearDownClass() {
        ChatServer.stopServer();
    }

    @Before
    public void setUp() throws IOException, InterruptedException {
        
        artur.connect("localhost", 9090, "a");
        Thread.sleep(100);
        nikos.connect("localhost", 9090, "n");
        Thread.sleep(100);
        sven.connect("localhost", 9090, "s");
        Thread.sleep(100);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    String result = "";
    String result2 = "";
    String result3 = "";
    String result4 = "";

    @Test
    public void testConnect() throws IOException, InterruptedException {

        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");
        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;
            }

            @Override
            public void updateUserList(String[] users) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        beer.registerEchoListener(listener);
        Thread.sleep(100);

        String response = "Users online: b,s,a,n";
        assertEquals(result, response);
    }

    @Test
    public void testSend() throws IOException, InterruptedException {
        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");
        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;
            }

            @Override
            public void updateUserList(String[] users) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        beer.registerEchoListener(listener);
        beer.sendToAll("hi");
        Thread.sleep(100);

        String response = "Users online: b,s,a,n";
        assertEquals(result, response);
    }

    @Test
    public void testCloseClient() throws IOException, InterruptedException {

       //1
        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");
        //2
        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;
            }

            @Override
            public void updateUserList(String[] users) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        beer.unRegisterEchoListener(listener);
        beer.send("CLOSE#");
        Thread.sleep(111);

        assertEquals("", result);

    }

    @Test
    public void testOnline() throws IOException, InterruptedException {
        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");

        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;
            }

            @Override
            public void updateUserList(String[] users) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        beer.registerEchoListener(listener);
        Thread.sleep(100);

        String response = "Users online: b,s,a,n";
        assertEquals(result, response);

    }
//this is the test where I have some problems and i will try to find a soultion, instead of message, i receive list of online users

    @Test
    public void testMessage() throws IOException, InterruptedException {
        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");
        Thread.sleep(100);

        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;

            }
            

            @Override
            public void updateUserList(String[] users
            ) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        
        artur.registerEchoListener(listener);
        nikos.registerEchoListener(listener);
        sven.registerEchoListener(listener);
        beer.registerEchoListener(listener);
        beer.sendToAll("msg");
        Thread.sleep(100);
        String response = "b sais: msg";

        assertEquals(result, response);

    }

    @Test
    public void closeServ() throws IOException, InterruptedException {

        ChatClient beer = new ChatClient();
        beer.connect("localhost", 9090, "b");
        ChatListener listener = new ChatListener() {

            @Override
            public void messageArrived(String data) {
                result = data;
            }

            @Override
            public void updateUserList(String[] users) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        beer.unRegisterEchoListener(listener);
        beer.send("CLOSE#");
        Thread.sleep(111);

        assertEquals("", result);

    }
    
    
    //this part methods work in a proper way
    
    @Test
    public void checkConnectMethod(){
        //  clients are connected: artur, nikos,sven, b
        //whenever connection is sucessfull, users should be added to the hasmap with user names and client handlers
        // test checks if size of the hasmap is equal to the number of connected clients
        
        int expectedNumberOfConnectedClients = 4;
        int realNumberOfConnectedClients = ChatServer.clientHandlersMap.size();
        
        //test if there is any other connection
        boolean contains = ChatServer.clientHandlersMap.containsKey("b");
        
        assertEquals(expectedNumberOfConnectedClients, realNumberOfConnectedClients);
        assertTrue(contains);
    }   
    

}
